@model ProductAddItemViewModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
}


    <div class="form-row" action="~/Catalog/AddItem" method="post">
        <div class="container-fluid"> 
            <div class="row pt-2">
                <div class="col-12">
                    <label class="col-form-label pt-1 pb-1">Name</label>
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control mt-1" })
                </div>
            </div>

            <div class="row  pt-2">
                <div class="col-12">
                    <label class="col-form-label">Description</label>
                     <span class=" pt-1 pb-1"></span>
                    @Html.TextAreaFor(m => m.ShortDescription, new { @class = "form-control mt-1" })
                </div>
            </div>

            <div class="row  pt-2">
                <div class="col-12">
                    <label class="col-form-label pt-1 pd-1">Vender</label>
                    <select asp-for="VendorId" asp-items="Model.AvailableVendors" class="custom-select form-control mt-1"></select>
                    <span class="field-validation-valid" data-valmsg-for="LastName" data-valmsg-replace="true"></span>
                </div>
            </div>

            <div class="row  pt-2">
                <div class="col-12">
                    <label class="col-form-label pt-1 pd-1">Categories</label>
                    <admin-input asp-for="Categories" class="form-control mt-1" />
                    <span asp-validation-for="Categories"></span>
                </div>
            </div>

           
            <div class="row  pt-2">
                <div class="col-12">
                    <input type="submit" class="btn btn-primary mt-1" />
                </div>
            </div>

        </div>
     </div>

        <script asp-location="Footer">
    @{
        //TODO move to Model
        var productTags = Model.AvailableCategories;
        var productTagsSb = new System.Text.StringBuilder();
        productTagsSb.Append("var initialCategories = [");
        for (int i = 0; i < productTags.Count; i++)
        {
            var tag = productTags[i];
            productTagsSb.Append("'");
            productTagsSb.Append(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(tag));
            productTagsSb.Append("'");
            if (i != productTags.Count - 1)
            {
                productTagsSb.Append(",");
            }
        }
        productTagsSb.Append("]");
    }
    //tags
    $(document).ready(function () {
        @Html.Raw(productTagsSb.ToString())
        $("#@Html.FieldIdFor(model => model.Categories)").tagEditor({
            autocomplete: {
            delay: 0,
            //position: { collision: 'flip' },
            source: initialCategories
            },
            delimiter: ',',
            placeholder: 'Enter categories ...'
        });
    });
        </script>

        @{

            //resources for product tags input
            Html.AppendCssFileParts("~/content/tagEditor/jquery.tag-editor.css", excludeFromBundle: true);
            Html.AppendScriptParts(ResourceLocation.Footer, "~/scripts/tagEditor/jquery.tag-editor.min.js", excludeFromBundle: true);
            Html.AppendScriptParts(ResourceLocation.Footer, "~/scripts/tagEditor/jquery.caret.min.js", excludeFromBundle: true);
        }
